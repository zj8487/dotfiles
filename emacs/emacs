;; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-

;; --------------------------------------------------------------------
;; http://whattheemacsd.com/init.el-01.html
;; Turn off mouse interface early in startup to avoid momentary display
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;; No splash screen please ... jeez
(setq inhibit-startup-message t)
;; --------------------------------------------------------------------

;; Set path to dependencies
(setq site-lisp-dir "~/dotfiles/emacs/site-lisp")

;; Set up load path
(add-to-list 'load-path default-directory)
(add-to-list 'load-path site-lisp-dir)

;; Add external projects to load path
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))

;; --------------------------------------------------------------------
;; Add ag.el (https://github.com/wilfred/ag.el)
(require 'ag)
(setq ag-highlight-search t)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Add auto-complete
(require 'auto-complete-config)
(ac-config-default)
; Use dictionaries by default
(setq-default ac-sources (add-to-list 'ac-sources 'ac-source-dictionary))
(global-auto-complete-mode t)
; Start auto-completion after 2 characters of a word
(setq ac-auto-start 3)
; case sensitivity is important when finding matches
(setq ac-ignore-case nil)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Add package archives TODO move these elsewhere? check magnars stuff
(require 'package)
;;(add-to-list 'package-archives
;;             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Enable ido mode
(require 'ido)
(ido-mode t)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; http://whattheemacsd.com/init.el-02.html
;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; http://whattheemacsd.com/init.el-03.html
;; Save point position between sessions
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; http://whattheemacsd.com/init.el-04.html
;; Diminish modeline clutter
;;(require 'diminish)
;(diminish 'wrap-region-mode)
;(diminish 'yas/minor-mode)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; http://whattheemacsd.com/init.el-05.html
;; Elisp go-to-definition with M-. and back again with M-,
;;(autoload 'elisp-slime-nav-mode "elisp-slime-nav")
;;(add-hook 'emacs-lisp-mode-hook (lambda () (elisp-slime-nav-mode t)))
;;(eval-after-load 'elisp-slime-nav '(diminish 'elisp-slime-nav-mode))
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; http://whattheemacsd.com/my-misc.el-01.html
;; Webjump to search using different enginges, e.g. google, wikipedia
;;(global-set-key (kbd "C-x g") 'webjump)
;; Add Urban Dictionary to webjump
;;(eval-after-load "webjump"
;;'(add-to-list 'webjump-sites
;;              '("Urban Dictionary" .
;;                [simple-query
;;                 "www.urbandictionary.com"
;;                 "http://www.urbandictionary.com/define.php?term="
;;                 ""])))
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; http://whattheemacsd.com/key-bindings.el-01.html
;; Awesome goto line that shows the line numbers to the left
(global-set-key [remap goto-line] 'goto-line-with-feedback)
(defun goto-line-with-feedback ()
  "Show line numbers temporarily, while prompting for the line number input"
  (interactive)
  (unwind-protect
      (progn
        (linum-mode 1)
        (goto-line (read-number "Goto line: ")))
    (linum-mode -1)))
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; http://whattheemacsd.com/setup-shell.el-01.html
;; Tap C-d twice to stop shell and kill buffer
;;(defun comint-delchar-or-eof-or-kill-buffer (arg)
;;  (interactive "p")
;;  (if (null (get-buffer-process (current-buffer)))
;;      (kill-buffer)
;;    (comint-delchar-or-maybe-eof arg)))
;;(add-hook 'shell-mode-hook
;;          (lambda ()
;;            (define-key shell-mode-map
;;              (kbd "C-d") 'comint-delchar-or-eof-or-kill-buffer)))
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; http://whattheemacsd.com/editing-defuns.el-01.html
;; Awesome! Stand anywhere on a line and start a new line below or
;; above
(defun open-line-below ()
  (interactive)
  (end-of-line)
  (newline)
  (indent-for-tab-command))
(defun open-line-above ()
  (interactive)
  (beginning-of-line)
  (newline)
  (forward-line -1)
  (indent-for-tab-command))
(global-set-key (kbd "<C-return>") 'open-line-below)
(global-set-key (kbd "<C-S-return>") 'open-line-above)
;; --------------------------------------------------------------------

;; Color theme stuff
(add-to-list 'load-path "~/dotfiles/emacs/color-theme")

(require 'color-theme)
(color-theme-initialize)
;(color-theme-robin-hood)
;(color-theme-deep-blue)
;(color-theme-hober)
(color-theme-gray30)
(setq my-color-themes (list 'color-theme-billw 'color-theme-robin-hood
                            'color-theme-deep-blue 'color-theme-hober))

(add-to-list 'load-path "~/dotfiles/emacs")
(load-library "comment-out-line")

(add-to-list 'load-path "~/dotfiles/emacs/doremi")
(require 'doremi-cmd)

;; Start emacs in full screen mode
(when (display-graphic-p)
  (defun fullscreen (&optional f)
    (interactive)
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
			   '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
			   '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0)))
  (fullscreen))

; Show which parenthesis belongs together upon placing the cursor on one of them
(show-paren-mode t)

; Always follow symbolic links to version controlled files
(setq vc-follow-symlinks t)

; Line and column mode
(setq line-number-mode t)
(setq column-number-mode t)

; Enabled downcase-region command (C-x C-l)
(put 'downcase-region 'disabled nil)

; Enabled upcase-region command (C-x C-u)
(put 'upcase-region 'disabled nil)

(defun scroll-one-line-up (amount)
  "Scroll text of current window upward one line"
  (interactive "p")
  (scroll-up amount))

(defun scroll-one-line-down (amount)
  "Scroll text of current window downward one line"
  (interactive "p")
  (scroll-down amount))

(defun move-to-previous-window ()
  (interactive)
  (select-window (previous-window)))

(defun move-to-next-window ()
  (interactive)
  (select-window (next-window)))

;; TODO move to key-bindings.el ?
(global-set-key "\C-c\C-z" 'suspend-frame)
(global-set-key "\C-xl" 'electric-buffer-list)
(global-set-key "\eg" 'goto-line)

(global-set-key "\C-z" 'scroll-one-line-up)
(global-set-key "\ez" 'scroll-one-line-down)
(global-set-key (kbd "C-,") 'move-to-previous-window)
(global-set-key (kbd "C-.") 'move-to-next-window)

(global-set-key (quote [67108909]) 'shrink-window);; C--
(global-set-key (quote [M-up]) `shrink-window);; M-up
(global-set-key (quote [67108907]) 'enlarge-window);; C-+
(global-set-key (quote [M-down]) `enlarge-window);; M-down

(defun prev-window ()
  (interactive)
  (other-window -1))
(define-key global-map (kbd "C-x p") 'prev-window)

;; Language specific setup files
(eval-after-load 'js2-mode '(require 'setup-js2-mode))

;; Map files to modes
(require 'mode-mappings)

;; --------------------------------------------------------------------
; Install jshint-mode (uses flymake)
;(require 'flymake-jshint)
;(add-hook 'js2-mode-hook (lambda ()
;                           (flymake-mode t)
;                           (local-set-key "\en" 'flymake-goto-next-error)
;                           (local-set-key "\ep" 'flymake-goto-prev-error)))
;; Turns on flymake for all files which have a flymake mode
;(add-hook 'find-file-hook 'flymake-find-file-hook)
;; Flymake log level. Useful when trouble shooting flymake problems
;;(setq flymake-log-level 3)
;; --------------------------------------------------------------------

;; Font used
(set-default-font "Source Code Pro 8")

;; Use spaces and not fecking tabs when auto indenting!
(setq-default indent-tabs-mode nil)

;; Use electric indent mode and pair mode
;;(electric-indent-mode)
;;(electric-pair-mode)

;; Automatically convert to unix line endings
(add-hook 'find-file-hook 'find-file-check-line-endings)
(defun dos-file-endings-p ()
  (string-match "dos" (symbol-name buffer-file-coding-system)))
(defun find-file-check-line-endings ()
  (when (dos-file-endings-p)
    (set-buffer-file-coding-system 'undecided-unix)
    (set-buffer-modified-p nil)))

;; Show error/warning message in status buffer
;; TODO use something else than custom-set-variables, need to split out settings and
;; not keep them all in the same place, how do you set a defcustom variable if not
;; using custom-set-variables?
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(help-at-pt-display-when-idle (quote (flymake-overlay)) nil (help-at-pt))
 '(help-at-pt-timer-delay 0.5)
 '(jshint-mode-jshintrc "/home/magnus/dotfiles/js/jshintrc.json"))

;; --------------------------------------------------------------------
;; Pull up the line below and join with the current line
(global-set-key (kbd "M-j")
                (lambda ()
                  (interactive)
                  (join-line -1)))
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Buffer names with folders -> Get rid of buffers named foo<1> etc
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Split the current buffer into three/four evenly wide vertical buffers
(defun split-windows-into-four-vertical ()
  (interactive)
  (delete-other-windows)
  (command-execute 'split-window-right)
  (command-execute 'split-window-right)
  (command-execute 'split-window-right)
  (command-execute 'balance-windows)
)
(global-set-key (kbd "C-x 6") 'split-windows-into-four-vertical)

(defun split-windows-into-three-vertical ()
  (interactive)
  (delete-other-windows)
  (command-execute 'split-window-right)
  (command-execute 'split-window-right)
  (command-execute 'balance-windows)
)
(global-set-key (kbd "C-x 4") 'split-windows-into-three-vertical)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Highlight trailing whitespace! Toggle with F9
(require 'highlight-chars)
(global-set-key (kbd "<f9>") 'hc-toggle-highlight-trailing-whitespace)
(hc-toggle-highlight-trailing-whitespace)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Do not fucking indent within C++ namespaces. Thanks!
(add-to-list 'c++-mode-hook (lambda () (c-set-offset 'innamespace 0)))
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Execute current file in a shell
(defun run-current-file ()
  "Execute the current file.
For example, if the current buffer is the file xx.py,
then it'll call “python xx.py” in a shell.
The file can be php, perl, python, ruby, javascript, bash, ocaml, vb, elisp.
File suffix is used to determine what program to run.

If the file is modified, ask if you want to save first.

If the file is emacs lisp, run the byte compiled version if exist."
  (interactive)
  (let* (
         (suffixMap
          `(
            ("pl" . "perl")
            ("py" . "python")
            ("rb" . "ruby")
            ("js" . "node")
            ("sh" . "bash")
            )
          )
         (fName (buffer-file-name))
         (fSuffix (file-name-extension fName))
         (progName (cdr (assoc fSuffix suffixMap)))
         (cmdStr (concat progName " \""   fName "\""))
         )

    (when (buffer-modified-p) (save-buffer))

    (if (string-equal fSuffix "el") ; special case for emacs lisp
        (load (file-name-sans-extension fName))
      (if progName
          (progn
            (message "Running…")
            (shell-command cmdStr "*run-current-file output*" )
            )
        (message "No recognized program file suffix for this file.")
        ) ) ))
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; C and C++ stuff
(define-key c++-mode-map (kbd "M-j") nil) ; dont redefine M-j for me please
(setq-default c-basic-offset 2)
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode)) ; .h files as C++ mode

;;(global-font-lock-mode t)
;;(global-set-key "\C-xv" 'quoted-insert)
;;(global-set-key "\C-xg" 'goto-line)
;;(global-set-key "\C-xf" 'search-forward)
(global-set-key "\C-xc" 'compile)

;; I used these one together with flymake and jshint
;;(global-set-key "\M-n" 'next-error)
;;(global-set-key "\M-p" 'previous-error)

;;(global-set-key "\C-xt" 'text-mode);
;;(global-set-key "\C-xr" 'replace-string);
;;(global-set-key "\C-xa" 'repeat-complex-command);
;;(global-set-key "\C-xm" 'manual-entry);
;;(global-set-key "\C-xw" 'what-line);
;;(global-set-key "\C-x\C-u" 'shell);
;;(global-set-key "\C-x0" 'overwrite-mode);
;;(global-set-key "\C-x\C-r" 'toggle-read-only);
;;(global-set-key "\C-t" 'kill-word);
;;(global-set-key "\C-p" 'previous-line);
;;(global-set-key "\C-u" 'backward-word);
;;(global-set-key "\C-o" 'forward-word);
;;(global-set-key "\C-h" 'backward-delete-char-untabify);
;;(global-set-key "\C-x\C-m" 'not-modified);
;;(setq make-backup-files 'nil);
;;(setq default-major-mode 'text-mode)
;;(setq text-mode-hook 'turn-on-auto-fill)
;;(set-default-font "-misc-fixed-medium-r-normal--15-140-*-*-c-*-*-1")
;;(setq auto-mode-alist (cons '("\\.cxx$" . c++-mode) auto-mode-alist))
;;(setq auto-mode-alist (cons '("\\.hpp$" . c++-mode) auto-mode-alist))
;;(setq auto-mode-alist (cons '("\\.tex$" . latex-mode) auto-mode-alist))

;(require 'font-lock)
;(add-hook 'c-mode-hook 'turn-on-font-lock)
;(add-hook 'c++-mode-hook 'turn-on-font-lock)

;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Skip creating lock files mmkay?]
(setq create-lockfiles nil)
;; --------------------------------------------------------------------

;; --------------------------------------------------------------------
;; Misc key bindings
(global-set-key "\M-p" 'run-current-file)
;; --------------------------------------------------------------------

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ido-only-match ((t (:foreground "chartreuse"))))
 '(ido-subdir ((t (:foreground "yellow")))))
